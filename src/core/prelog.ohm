Prelog {

	Sequence = ListOf<Term, #space>

	Term =
		| Parentheses
		| Brackets
		| Braces
		| identifier
		| operator
		| number
		| string

	Parentheses = "(" Sequence ")"

	Brackets = "[" Sequence "]"

	Braces = "{" Sequence "}"

	Tokens = Token*

	Token =
		| identifier
		| operator
		| number
		| string
		| delimiter

	// lexer

	space += comment
	comment = blockComment | lineEndComment
	blockComment = "/*" (~"*/" any)* "*/"
	lineEndComment = "//" (~("\n" | "\r") any)*

	identifier = identifierStart identifierPart*
	identifierStart = "A".."Z" | "a".."z" | "_" | "@"
	identifierPart = identifierStart | digit

	operator = operatorChar+
	operatorChar =
		| "+" | "-" | "*" | "/" | "%" | "^"
		| "=" | "<" | ">"
		| "#" | "&" | "|" | "ยง" | "?" | "!" | "ร"

	delimiter =
		| "(" | ")" | "{" | "}" | "[" | "]"
		| "," | ";"

	number = "-"? natural ("." fractionalPart)? exponentPart?
	natural = positiveInteger | "0"
	positiveInteger = nonZeroDigit digit*
	fractionalPart = digit+
	exponentPart = ("e" | "E") ("+" | "-")? digit+
	nonZeroDigit = "1".."9"

	string = "\"" stringCharacter* "\""
	stringCharacter = normalChar | escapeSequence
	normalChar = ~("\"" | "\\" | "\u0000".."\u001f") any
	escapeSequence = "\\" escapeSpec
	escapeSpec =
		| "\""
		| "'"
		| "\\"
		| "\\/"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| unicodeEscapeSpec
	unicodeEscapeSpec = "u" hexDigit hexDigit hexDigit hexDigit
}
